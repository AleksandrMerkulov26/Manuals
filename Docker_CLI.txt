docker version  - показывает информацию о клиенте и сервере Docker

docker ps -a    - показывает запущенные и остановленные контейнеры
docker ps       - показывает только запущенные контейнеры.

docker image    - показывает список локальных образов.
docker rmi "Id and Repo img" -удаление контейнера
docker run "Название образа" - создает и запускает контейнер.
docker pull "Название образа" - скачивает контейнер, но не запускает его.
docker rm  "Id контейнера или имя" - Удаляет контейнер
docker run -d "Название образа" - Запуск контейнера в фоновом режиме.
docker run -p 8080:80 nginx - Запуск контейнера и проброс портов.
docker run -d -p 8080:80 - Запуск контейнера в фоновом режиме с пробросом портов.
docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d nginx - замена стандартного файла индекс html, на не стандартный. Запуск в фоном режиме с пробросом портов.
docker run -it --rm "Название образа" - запускает контейнер, а затем после выхода из контейнера автоматический удаляет его.

docker run -it - интерактивный терминал.
docker container inspect "Название контейнера" - информация о контейнере.
docker stop "Id или имя контейнера" - останавливает контейнер
docker kill "Id или имя контейнера" - останавливает принудительно контейнер
docker exec -it "Id или имя контейнера" bash - запуск процесса bash в контейнере
docker container prune - удаление всех контейнеров
docker system prune --all --volumes --force - удалить все не используемые volume
hub.docker - образы докер


Разделение команды на строки:
docker run \                              - запуск докера.
-v $(pwd)/:/usr/share/nginx/html/ \       - перезалив информации с домашней дир в дир контейнера
-p 8088:80 \                              - проброс портов
-d \                                      - запуск в фоновом режиме
--rm \                                    - удаление контейнера, после его установки
nginx                                     - образ


     Этапы создания образа.
1.Необходим Dockerfile
2.Dockerfile помещают в корне папки приложения
3.Dockerfile содержит инструкцию по созданию образа
4.При создании образа можно указать имя и тег для образа
5.На основании готового образа можно создать контейнер

Dockerfile.

FROM python:alpine

WORKDIR /app

COPY . .

CMD  ["python", "main.py"]


main.py

import calendar

print ('Добро пожаловать в календарь \n')

year = int (input('Введите год:'))
month = int (input('Введите месяц:'))

print (calendar.month(year, month))

print('Всего хорошего!')


Для создания образа нужно перейти в директорию где находится докерфайл или указать путь.

docker build . -t my-calendar:2.0
.-относительный путь к директории.
-t - указание тэга.

                                           Docker Compose

Может запускать несколько контейнеров используя для этого только одну команду.
Императивный подход - давать инструкцию каждый раз для выполнения определённого действия.(Разовая команда)
Декларативный подход- получение желаемого результата. Создании инструкции более высокого уровня на yml.
 + Декларативный подход к созданию контейнеров
 + Все необходимые контейнеры запускаются одной командой
 + Автоматическое создание необходимых образов на основании Dockerfile каждого приложения
 + Автоматическое создание отдельной изолированной сети для взаимодействия контейнеров.
 + Благодаря DNS возможно взаимодействовать между контейнерами, используя имена сервисов.




Политики перезапуска Docker предназначены для поддержания активности контейнеров при всех возможных сбоях, мы можем использовать это несколькими способами, например, если у нас есть веб-сервер, работающий на контейнере, и мы должны поддерживать его активным даже при плохом запросе, мы можем использовать unless-stoppedфлаг, он будет поддерживать работоспособность сервера до тех пор, пока мы не остановимся это вручную.

Флаг перезапуска может быть любым из следующих:

"no':- это значение по умолчанию, и оно никогда не перезапустит контейнер.
on-failure : - он перезапускает контейнер всякий раз, когда обнаруживает ошибку, или, скажем, всякий раз, когда процесс, запущенный внутри контейнера, завершается с ненулевым кодом выхода. Код выхода: - 0 означает отсутствие ошибки, мы намеренно завершили процесс, но любое ненулевое значение является ошибкой.
always : - в качестве имени он всегда будет перезапускать контейнер, независимо от того, какой код выхода. Кроме того, он перезапустит контейнер, даже если мы вручную остановили его, но для этого нам нужно перезапустить демон docker.
unless-stopped : - это похоже на alwaysфлаг, единственное отличие заключается в том, что после остановки контейнера вручную он не перезапустится автоматически даже после перезапуска демона docker, пока мы снова не запустим контейнер вручную.